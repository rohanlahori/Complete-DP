class Solution {
public:
    #define ll long long
#define all(x) (x).begin(), (x).end()
#define vll vector<ll>
#define vi vector<ll>
#define vs vector<string>
#define pb push_back
#define mp make_pair
#define POB pop_back
#define f(i, x, z) for (ll i = x; i < z; i++)
#define debug(x) cout << 'DEBUG------> ' << x << endl
#define srt(v) sort(v.begin(), v.end())
#define rsrt(v) sort(v.rbegin(), v.rend())
#define clr(x) memset(x, 0, sizeof(x))
#define setall(x, a) memset(x, a, sizeof(x))
#define INF 1000000000000000003
#define mathpi 3.141592653589793238
#define F first
#define S second
#define vs vector<string>
#define vpair vector<pair<ll, ll>>
#define vpairs vector<pair<string, string>>
#define tin tuple<ll, ll, ll>
#define ld long double
#define print(v) for(auto x:v){cout<<x<<" ";}cout<<"\n";
#define print_pair(v) for(auto x:v){cout<<x.first<<" "<<x.second<<"\n";}cout<<"\n";
#define nline "\n"
#define nl "\n"
#define rev(v) reverse(v.begin(), v.end())
#define mapll map<ll, ll>
#define maplc map<ll, char>
#define mapcc map<char, char>
#define mapcl map<char, ll>
int md=1e9+7;
    int paths(vector<vector<int>> &grid,int i,int j,int n,int m,int sum,int k,vector<vector<vector<int>>> &dp)
    {
        sum+=grid[i][j];
        sum%=k;
        
        int right=0,down=0;
        if(dp[i][j][sum]!=-1)
        {
            return dp[i][j][sum];
        }
        if(i==n-1 && j==m-1)
        {
            if(sum%k==0)
            {
                return 1;
            }
            return 0;
        }
        if(i<n-1)
        {
            down=paths(grid,i+1,j,n,m,sum,k,dp);
        }
        if(j<m-1)
        {
            right=paths(grid,i,j+1,n,m,sum,k,dp);
        }
        return dp[i][j][sum]=(right+down)%(md);
    }
    int numberOfPaths(vector<vector<int>>& grid, int k) {
        queue<pair<int,pair<int,int>>>q;
        q.push(mp(grid[0][0],mp(0,0)));
        int n=grid.size();
        int m=grid[0].size();
        int sum=0;
        vector<vector<vector<int>>>dp(n+10,vector<vector<int>>(m+10,vector<int>(k+10,-1)));
        return paths(grid,0,0,n,m,sum,k,dp);
    }
};
