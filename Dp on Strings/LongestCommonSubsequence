 int rec(int n,int m,string s,string s1,vector<vector<int>> &dp)
{
    if(n==-1 || m==-1)
    {
        return 0;
    }
    if(dp[n][m]!=-1)
    {
        return dp[n][m];
    }
    if(s[n]==s1[m])
    {
        return dp[n][m]=1+rec(n-1,m-1,s,s1,dp);
    }
    else{
        return dp[n][m]=max(rec(n-1,m,s,s1,dp),rec(n,m-1,s,s1,dp));
    }
}
int longestCommonSubsequence(string s, string s1) {
    int n=s.length();
    int m=s1.length();
    vector<vector<int>>dp(n+1,vector<int>(m+1,-1));

    for(int i=0;i<=n;i++)
    {
        dp[i][0]=0;
    }
    for(int i=0;i<=m;i++)
    {
        dp[0][i]=0;
    }
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            if(s[i-1]==s1[j-1])
            {
                dp[i][j]=1+dp[i-1][j-1];
            }
            else{
                dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
            }
        }
    }
    return dp[n][m];
}
